# --------------------------------------------------------
# Route:............/user/term/yazi/yazi.toml
# Type:.............Yazi Main Configuration
# Created by:.......Pablo Aguirre
# ---------------------------------------------------------

# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.

"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio          = [ 1, 4, 3 ]
sort_by        = "alphabetical" # Options: alphabetical, natural, mtime, ctime, atime, size, none
sort_sensitive = false
sort_reverse 	 = false
sort_dir_first = true
sort_translit  = false         # Use transliteration for sorting (e.g., treat 'Ã©' like 'e')
linemode       = "none"        # Options: "none", "size", "permissions", "collapse" (icons only)
show_hidden    = false         # Set to true to always show hidden files by default
show_symlink   = true
scrolloff      = 5             # Keep N lines visible above/below cursor when scrolling
mouse_events   = [ "click", "scroll" ]

[preview]
tab_size        = 2
max_width       = 600
max_height      = 900
cache_dir       = ""             # Leave empty to use default cache location
image_filter    = "triangle"     # Affects image scaling quality. Options: nearest, triangle, catmull-rom, gaussian, lanczos3
image_quality   = 75             # For formats supporting quality settings (e.g., JPEG)
sixel_fraction  = 15             # For sixel image rendering
ueberzug_scale  = 1              # Adjust scale factor for ueberzug image previews if needed
ueberzug_offset = [ 0, 0, 0, 0 ] # [x, y, width, height] offset for ueberzug

[opener]
edit = [
	{ run = '${EDITOR:=nvim} "$@"', desc = "${EDITOR:-nvim}", block = true, for = "unix" }, # Use nvim as default if $EDITOR is unset
	{ run = 'code %*',            orphan = true, desc = "code",           for = "windows" },
	{ run = 'code -w %*',         block = true,  desc = "code (block)",   for = "windows" },
]
open = [
	{ run = 'xdg-open "$1"',                desc = "Open", for = "linux" },
	{ run = 'open "$@"',                    desc = "Open", for = "macos" },
	{ run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
]
reveal = [
	{ run = 'xdg-open "$(dirname "$1")"',           desc = "Reveal", for = "linux" },
	{ run = 'open -R "$1"',                         desc = "Reveal", for = "macos" },
	{ run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
	{ run = 'ya pub extract --list "$@"', desc = "Extract here", for = "unix" },
	{ run = 'ya pub extract --list %*',   desc = "Extract here", for = "windows" },
]
play = [
	{ run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
	{ run = 'mpv --force-window %*', orphan = true, for = "windows" },
	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]

[open]
rules = [
	# Folder
	{ name = "*/", use = [ "edit", "open", "reveal" ] },
	# Text (Markdown handled separately by previewer rule)
	{ mime = "text/*", use = [ "edit", "reveal" ] },
	# Image
	{ mime = "image/*", use = [ "open", "reveal" ] },
	# Media
	{ mime = "{audio,video}/*", use = [ "play", "reveal" ] },
	# Archive
	{ mime = "application/{,g}zip", use = [ "extract", "reveal" ] },
	{ mime = "application/x-{tar,bzip*,7z-compressed,xz,rar}", use = [ "extract", "reveal" ] },
	# JSON / JS
	{ mime = "application/{json,x-ndjson}", use = [ "edit", "reveal" ] },
	{ mime = "*/javascript", use = [ "edit", "reveal" ] },
	# PDF
	{ mime = "application/pdf", use = [ "open", "edit", "reveal" ] },
	# Empty file
	{ mime = "inode/x-empty", use = [ "edit", "reveal" ] },
	# Fallback
	{ name = "*", use = [ "open", "reveal" ] },
]

[tasks]
micro_workers    = 10 # For UI-related tasks
macro_workers    = 25 # For background tasks like previews
bizarre_retry    = 5  # Retries for potentially recoverable errors
image_alloc      = 536870912  # 512MB - Max memory for image decoding pool
image_bound      = [ 0, 0 ]   # Max dimensions for image previews (0 = unbounded)
suppress_preload = false      # Set to true to disable preloading previews for performance

[plugin]
# -- Fetchers run first to gather metadata (e.g., mime type) --
fetchers = [
	{ id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
]
# -- Preloaders prepare data for previewers (e.g., decode images) --
preloaders = [
	# Image
	{ mime = "image/{avif,heic,jxl,svg+xml}", run = "magick" }, # Use ImageMagick for these
	{ mime = "image/*", run = "image" },                       # Use internal Yazi image decoder
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/vnd.ms-opentype", run = "font" },
]
# -- Previewers display the content --
previewers = [
  # --- MARKDOWN RULE ---
  # Use custom script for Markdown rendering (points to ~/.config/yazi/plugins/markdown.sh)
  # { mime = "text/markdown", run = "markdown" },
  # Alternatively, if mime detection is unreliable, use filename pattern:
  # { name = "*.{md,markdown}", run = "markdown" },
  # --- END MARKDOWN RULE ---

	# Folder
  { name = "*/", run = "folder", sync = true },
	# Code (will now be skipped for text/markdown due to the rule above)
	{ mime = "text/*", run = "code" },
	{ mime = "*/{xml,javascript,x-wine-extension-ini}", run = "code" },
	# JSON
	{ mime = "application/{json,x-ndjson}", run = "json" },
	# Image
	{ mime = "image/{avif,heic,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Archive
	{ mime = "application/{,g}zip", run = "archive" },
	{ mime = "application/x-{tar,bzip*,7z-compressed,xz,rar,iso9660-image}", run = "archive" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/vnd.ms-opentype", run = "font" },
	# Fallback (shows basic file info)
	{ name = "*", run = "file" },
]

[input]
# -- Input prompts configuration --
cursor_blink = false

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ] # [x, y, width, height] relative to origin

# create
# -- FIX: Changed from string to array[2] --
create_title  = [ "Create:", "Create:" ]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"   # Position relative to the hovered file
rename_offset = [ 0, 1, 50, 3 ]

# trash
trash_title 	= "Move {n} selected file{s} to trash? (y/N)"
trash_origin	= "top-center"
trash_offset	= [ 0, 2, 50, 3 ]

# delete
delete_title 	= "Delete {n} selected file{s} permanently? (y/N)"
delete_origin	= "top-center"
delete_offset	= [ 0, 2, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ] # Array used for next/previous context
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:" # {n} is replaced by search engine name
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ] # Array used for normal/blocking context
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

# overwrite
overwrite_title  = "Overwrite an existing file? (y/N)"
overwrite_origin = "top-center"
overwrite_offset = [ 0, 2, 50, 3 ]

# quit
quit_title  = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [ 0, 2, 50, 3 ]

[select]
# -- Configuration for the 'open with' selection menu --
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ] # Wider height for selection list

[which]
# -- Configuration for command selection (e.g., multiple 'edit' options) --
sort_by      	 = "none" # Keep order defined in [opener]
sort_sensitive = false
sort_reverse 	 = false
sort_translit  = false

[log]
# -- Yazi internal logging (for debugging) --
enabled = false
# log_file = # Leave empty for default location if enabled-
